// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package func_stack

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type stackBssArg struct {
	TgidFilter    uint32
	CollectUser   uint8
	CollectKernel uint8
	_             [2]byte
}

type stackSampleKey struct {
	Pid       uint32
	_         [4]byte
	KernStack int64
	UserStack int64
	Comm      [16]int8
}

// loadStack returns the embedded CollectionSpec for stack.
func loadStack() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_StackBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load stack: %w", err)
	}

	return spec, err
}

// loadStackObjects loads stack and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*stackObjects
//	*stackPrograms
//	*stackMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadStackObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadStack()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// stackSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackSpecs struct {
	stackProgramSpecs
	stackMapSpecs
}

// stackSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackProgramSpecs struct {
	DoPerfEvent *ebpf.ProgramSpec `ebpf:"do_perf_event"`
}

// stackMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type stackMapSpecs struct {
	Args   *ebpf.MapSpec `ebpf:"args"`
	Counts *ebpf.MapSpec `ebpf:"counts"`
	Stacks *ebpf.MapSpec `ebpf:"stacks"`
}

// stackObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadStackObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackObjects struct {
	stackPrograms
	stackMaps
}

func (o *stackObjects) Close() error {
	return _StackClose(
		&o.stackPrograms,
		&o.stackMaps,
	)
}

// stackMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadStackObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackMaps struct {
	Args   *ebpf.Map `ebpf:"args"`
	Counts *ebpf.Map `ebpf:"counts"`
	Stacks *ebpf.Map `ebpf:"stacks"`
}

func (m *stackMaps) Close() error {
	return _StackClose(
		m.Args,
		m.Counts,
		m.Stacks,
	)
}

// stackPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadStackObjects or ebpf.CollectionSpec.LoadAndAssign.
type stackPrograms struct {
	DoPerfEvent *ebpf.Program `ebpf:"do_perf_event"`
}

func (p *stackPrograms) Close() error {
	return _StackClose(
		p.DoPerfEvent,
	)
}

func _StackClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed stack_bpfeb.o
var _StackBytes []byte
